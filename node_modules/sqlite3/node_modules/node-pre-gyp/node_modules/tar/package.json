{
  "_from": "tar@~2.2.0",
  "_id": "tar@2.2.0",
  "_location": "/sqlite3/node-pre-gyp/tar",
  "_nodeVersion": "0.12.4",
  "_npmUser": {
    "email": "soldair@gmail.com",
    "name": "soldair"
  },
  "_npmVersion": "2.13.4",
  "_phantomChildren": {
    "mkdirp": "0.5.1",
    "rimraf": "2.4.3"
  },
  "_requiredBy": [
    "/sqlite3/node-pre-gyp"
  ],
  "_resolved": "https://registry.npmjs.org/tar/-/tar-2.2.0.tgz",
  "_shasum": "527c595940b9673f386c7237759982ab2f274d08",
  "_shrinkwrap": null,
  "author": {
    "email": "i@izs.me",
    "name": "Isaac Z. Schlueter",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/node-tar/issues"
  },
  "dependencies": {
    "block-stream": "*",
    "fstream": "^1.0.2",
    "inherits": "2"
  },
  "description": "tar for node",
  "devDependencies": {
    "graceful-fs": "^3.0.2",
    "mkdirp": "^0.5.0",
    "rimraf": "1.x",
    "tap": "0.x"
  },
  "directories": {},
  "dist": {
    "shasum": "527c595940b9673f386c7237759982ab2f274d08",
    "tarball": "http://registry.npmjs.org/tar/-/tar-2.2.0.tgz"
  },
  "gitHead": "3cab63959c51451a84cc8d1f8ef02d45b8b4f836",
  "homepage": "https://github.com/isaacs/node-tar#readme",
  "license": "ISC",
  "main": "tar.js",
  "maintainers": [
    {
      "name": "isaacs",
      "email": "isaacs@npmjs.com"
    },
    {
      "name": "othiym23",
      "email": "ogd@aoaioxxysz.net"
    },
    {
      "name": "soldair",
      "email": "soldair@gmail.com"
    }
  ],
  "name": "tar",
  "optionalDependencies": {},
  "readme": "# node-tar\n\nTar for Node.js.\n\n[![NPM](https://nodei.co/npm/tar.png)](https://nodei.co/npm/tar/)\n\n## API\n\nSee `examples/` for usage examples.\n\n### var tar = require('tar')\n\nReturns an object with `.Pack`, `.Extract` and `.Parse` methods.\n\n### tar.Pack([properties])\n\nReturns a through stream. Use\n[fstream](https://npmjs.org/package/fstream) to write files into the\npack stream and you will receive tar archive data from the pack\nstream.\n\nThis only works with directories, it does not work with individual files.\n\nThe optional `properties` object are used to set properties in the tar\n'Global Extended Header'. If the `fromBase` property is set to true,\nthe tar will contain files relative to the path passed, and not with\nthe path included.\n\n### tar.Extract([options])\n\nReturns a through stream. Write tar data to the stream and the files\nin the tarball will be extracted onto the filesystem.\n\n`options` can be:\n\n```js\n{\n  path: '/path/to/extract/tar/into',\n  strip: 0, // how many path segments to strip from the root when extracting\n}\n```\n\n`options` also get passed to the `fstream.Writer` instance that `tar`\nuses internally.\n\n### tar.Parse()\n\nReturns a writable stream. Write tar data to it and it will emit\n`entry` events for each entry parsed from the tarball. This is used by\n`tar.Extract`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/node-tar.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "2.2.0"
}
